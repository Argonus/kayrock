defmodule(Kayrock.DescribeAcls) do
  @moduledoc false
  _ = " THIS CODE IS GENERATED BY KAYROCK"

  defmodule(V0.Request) do
    @moduledoc false
    _ = " THIS CODE IS GENERATED BY KAYROCK"

    defstruct(
      resource_type: nil,
      resource_name: nil,
      principal: nil,
      host: nil,
      operation: nil,
      permission_type: nil,
      correlation_id: nil,
      client_id: nil
    )

    import(Elixir.Kayrock.Serialize)
    @type t :: %__MODULE__{}
    def(api_key) do
      Kayrock.KafkaSchemaMetadata.api_key(:describe_acls)
    end

    def(api_vsn) do
      0
    end

    def(response_deserializer) do
      &V0.Response.deserialize/1
    end

    def(schema) do
      [
        resource_type: :int8,
        resource_name: :nullable_string,
        principal: :nullable_string,
        host: :nullable_string,
        operation: :int8,
        permission_type: :int8
      ]
    end

    def(serialize(%V0.Request{} = struct)) do
      [
        <<api_key()::16, api_vsn()::16, struct.correlation_id()::32,
          byte_size(struct.client_id())::16, struct.client_id()::binary>>,
        [
          serialize(:int8, Map.fetch!(struct, :resource_type)),
          serialize(:nullable_string, Map.fetch!(struct, :resource_name)),
          serialize(:nullable_string, Map.fetch!(struct, :principal)),
          serialize(:nullable_string, Map.fetch!(struct, :host)),
          serialize(:int8, Map.fetch!(struct, :operation)),
          serialize(:int8, Map.fetch!(struct, :permission_type))
        ]
      ]
    end
  end

  defimpl(Elixir.Kayrock.Request, for: V0.Request) do
    def(serialize(%V0.Request{} = struct)) do
      try do
        V0.Request.serialize(struct)
      rescue
        e ->
          reraise(Kayrock.InvalidRequestError, {e, struct}, __STACKTRACE__)
      end
    end

    def(api_vsn(%V0.Request{})) do
      V0.Request.api_vsn()
    end

    def(response_deserializer(%V0.Request{})) do
      V0.Request.response_deserializer()
    end
  end

  def(get_request_struct(0)) do
    %V0.Request{}
  end

  defmodule(V0.Response) do
    @moduledoc false
    _ = " THIS CODE IS GENERATED BY KAYROCK"

    defstruct(
      throttle_time_ms: nil,
      error_code: nil,
      error_message: nil,
      resources: [],
      correlation_id: nil
    )

    @type t :: %__MODULE__{}
    import(Elixir.Kayrock.Deserialize)

    def(api_key) do
      Kayrock.KafkaSchemaMetadata.api_key(:describe_acls)
    end

    def(api_vsn) do
      0
    end

    def(schema) do
      [
        throttle_time_ms: :int32,
        error_code: :int16,
        error_message: :nullable_string,
        resources:
          {:array,
           [
             resource_type: :int8,
             resource_name: :string,
             acls:
               {:array,
                [principal: :string, host: :string, operation: :int8, permission_type: :int8]}
           ]}
      ]
    end

    def(deserialize(data)) do
      <<correlation_id::32-signed, rest::binary>> = data

      deserialize_field(
        :root,
        :throttle_time_ms,
        %__MODULE__{correlation_id: correlation_id},
        rest
      )
    end

    defp(deserialize_field(:root, :throttle_time_ms, acc, data)) do
      {val, rest} = deserialize(:int32, data)
      deserialize_field(:root, :error_code, Map.put(acc, :throttle_time_ms, val), rest)
    end

    defp(deserialize_field(:root, :error_code, acc, data)) do
      {val, rest} = deserialize(:int16, data)
      deserialize_field(:root, :error_message, Map.put(acc, :error_code, val), rest)
    end

    defp(deserialize_field(:root, :error_message, acc, data)) do
      {val, rest} = deserialize(:nullable_string, data)
      deserialize_field(:root, :resources, Map.put(acc, :error_message, val), rest)
    end

    defp(deserialize_field(:resources, :resource_type, acc, data)) do
      {val, rest} = deserialize(:int8, data)
      deserialize_field(:resources, :resource_name, Map.put(acc, :resource_type, val), rest)
    end

    defp(deserialize_field(:resources, :resource_name, acc, data)) do
      {val, rest} = deserialize(:string, data)
      deserialize_field(:resources, :acls, Map.put(acc, :resource_name, val), rest)
    end

    defp(deserialize_field(:acls, :principal, acc, data)) do
      {val, rest} = deserialize(:string, data)
      deserialize_field(:acls, :host, Map.put(acc, :principal, val), rest)
    end

    defp(deserialize_field(:acls, :host, acc, data)) do
      {val, rest} = deserialize(:string, data)
      deserialize_field(:acls, :operation, Map.put(acc, :host, val), rest)
    end

    defp(deserialize_field(:acls, :operation, acc, data)) do
      {val, rest} = deserialize(:int8, data)
      deserialize_field(:acls, :permission_type, Map.put(acc, :operation, val), rest)
    end

    defp(deserialize_field(:acls, :permission_type, acc, data)) do
      {val, rest} = deserialize(:int8, data)
      deserialize_field(:acls, nil, Map.put(acc, :permission_type, val), rest)
    end

    defp(deserialize_field(:resources, :acls, acc, data)) do
      <<num_elements::32-signed, rest::binary>> = data

      {vals, rest} =
        if(num_elements > 0) do
          Enum.reduce(1..num_elements, {[], rest}, fn _ix, {acc, d} ->
            {val, r} = deserialize_field(:acls, :principal, %{}, d)
            {[val | acc], r}
          end)
        else
          {[], rest}
        end

      deserialize_field(:resources, nil, Map.put(acc, :acls, Enum.reverse(vals)), rest)
    end

    defp(deserialize_field(:root, :resources, acc, data)) do
      <<num_elements::32-signed, rest::binary>> = data

      {vals, rest} =
        if(num_elements > 0) do
          Enum.reduce(1..num_elements, {[], rest}, fn _ix, {acc, d} ->
            {val, r} = deserialize_field(:resources, :resource_type, %{}, d)
            {[val | acc], r}
          end)
        else
          {[], rest}
        end

      deserialize_field(:root, nil, Map.put(acc, :resources, Enum.reverse(vals)), rest)
    end

    defp(deserialize_field(_, nil, acc, rest)) do
      {acc, rest}
    end
  end

  def(deserialize(0, data)) do
    V0.Response.deserialize(data)
  end

  def(min_vsn) do
    0
  end

  def(max_vsn) do
    0
  end
end
